using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class #SCRIPTNAME# : CreatureBehavuourController
{
    Coroutine updateBehave;
    Coroutine attackBehave;
    Coroutine runBehave;
    Coroutine watchBehave;
    protected override void Awake()
    {
        base.Awake();
		hatredCurve = ConstHatredCurve.instance.//GetCurve();
    }
    protected override void OnEnable()
    {
        base.OnEnable();
        SetTarget(getMaxHatredObject().gameObject);
        StartCoroutine(watchDis());
        updateBehave = StartCoroutine(startBehave());
        StartCoroutine(switchTarget());
    }
	IEnumerator startBehave()
    {
        yield return new WaitForSeconds(4f); //the time the mob will wait for the birth animation;
		//do something
        StartCoroutine(isOnSky());//This is important

        updateBehave = StartCoroutine(behaveUpdate());
        StartCoroutine(behaveUpdate()); //update
    }
    IEnumerator behaveUpdate()
    {
        yield return new WaitForEndOfFrame();
		//do something
		

		//Only a reference

        //GetComponent<Animator>().SetBool("OnSky", !isOnGround);
        //if (!isOnGround)
        //{
        //    if (runBehave != null)
        //    {
        //        StopCoroutine(runBehave);
        //        runBehave = null;
        //    }
        //    if (attackBehave != null)
        //    {
        //        StopCoroutine(attackBehave);
        //        attackBehave = null;
        //    }
        //    yield return new WaitForEndOfFrame();
        //    StartCoroutine(behaveUpdate());
        //    yield break;
        //}
        //if(isNearTarget)
        //{
        //    if(attackBehave == null)
        //    {
        //        if(runBehave != null)
        //        {
        //            StopCoroutine(runBehave);
        //            runBehave = null;
        //        }
        //        if(attackBehave == null)
        //            attackBehave = StartCoroutine(attack());
        //    }
        //}
        //else
        //{
        //    if(attackBehave != null)
        //    {
        //        StopCoroutine(attackBehave);
        //        attackBehave = null;
        //    }
        //    if(runBehave == null)
        //        runBehave =  StartCoroutine(run());
        //}
        StartCoroutine(behaveUpdate());
    }
	IEnumerator watchDis()
    {
        Ray ray = new Ray(transform.position, transform.forward);
        foreach (var hit in Physics.RaycastAll(ray, attackDis))
        {
            if (hit.collider.gameObject == target)
            {
                isNearTarget = true;
                yield return new WaitForEndOfFrame();
                watchBehave = StartCoroutine(watchDis());
                yield break;
            }
        }
        isNearTarget = false;
        yield return new WaitForEndOfFrame();
        watchBehave = StartCoroutine(watchDis());
    }
	IEnumerator attack()
    {
        GetComponent<Animator>().CrossFade("AttackUnarmed [7]", 0.1f);
        StartCoroutine(Attack());
        yield return new WaitForSecondsRealtime(0.75f);

        GetComponent<Animator>().CrossFade("Stand [1]", 0.1f);
        yield return new WaitForSeconds(0.3f);
        attackBehave = StartCoroutine(attack());
        yield break;
    }
    IEnumerator run()
    {
        GetComponent<Animator>().CrossFade("Run [6]", 0f);
        Vector3 dir = target.transform.position - transform.position;
        dir.y = 0;
        transform.position += dir.normalized * Time.deltaTime;
        yield return new WaitForEndOfFrame();
        runBehave = StartCoroutine(run());
    }



	//OVERRIDE FUNCTIONS
    public override IEnumerator Die()
    {
        GetComponent<Animator>().SetTrigger("Die");
        StopCoroutine(updateBehave);
        if (runBehave != null)
        {
            StopCoroutine(runBehave);
            runBehave = null;
        }
        if (attackBehave != null)
        {
            StopCoroutine(attackBehave);
            attackBehave = null;
        }
        KOFItem.DestoryByPool(this);

    }
    protected override IEnumerator Live()
    {
        return base.Live();
    }
    public override void SetTarget(GameObject target)
    {
        base.SetTarget(target);
		Vector3 targetPos = target.transform.position;
        targetPos.y = transform.position.y;
        transform.LookAt(targetPos);
    }
    protected override KOFItem getMaxHatredObject()
    {
        return base.getMaxHatredObject();
    }
    public override int GetMaxInstance()
    {
        return base.GetMaxInstance();
    }
	protected override IEnumerator switchTarget()
    {
        return base.switchTarget();
    }
	    protected override IEnumerator isOnSky(float height = 0.2F)
    {
        return base.isOnSky(height);
    }
    public override IEnumerator watchForDeath()
    {
        return base.watchForDeath();
    }
}
